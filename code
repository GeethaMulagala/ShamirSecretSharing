import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

public class ShamirSecretSharing {

    public static void main(String[] args) {
        // First test case
        String testCase1Json = "{\n" +
                "    \"keys\": {\n" +
                "        \"n\": 4,\n" +
                "        \"k\": 3\n" +
                "    },\n" +
                "    \"1\": {\n" +
                "        \"base\": \"10\",\n" +
                "        \"value\": \"4\"\n" +
                "    },\n" +
                "    \"2\": {\n" +
                "        \"base\": \"2\",\n" +
                "        \"value\": \"111\"\n" +
                "    },\n" +
                "    \"3\": {\n" +
                "        \"base\": \"10\",\n" +
                "        \"value\": \"12\"\n" +
                "    },\n" +
                "    \"6\": {\n" +
                "        \"base\": \"4\",\n" +
                "        \"value\": \"213\"\n" +
                "    }\n" +
                "}";

        // Second test case
        String testCase2Json = "{\n" +
                "    \"keys\": {\n" +
                "        \"n\": 10,\n" +
                "        \"k\": 7\n" +
                "    },\n" +
                "    \"1\": {\n" +
                "        \"base\": \"6\",\n" +
                "        \"value\": \"13444211440455345511\"\n" +
                "    },\n" +
                "    \"2\": {\n" +
                "        \"base\": \"15\",\n" +
                "        \"value\": \"aed7015a346d63\"\n" +
                "    },\n" +
                "    \"3\": {\n" +
                "        \"base\": \"15\",\n" +
                "        \"value\": \"6aeeb69631c227c\"\n" +
                "    },\n" +
                "    \"4\": {\n" +
                "        \"base\": \"16\",\n" +
                "        \"value\": \"e1b5e05623d881f\"\n" +
                "    },\n" +
                "    \"5\": {\n" +
                "        \"base\": \"8\",\n" +
                "        \"value\": \"316034514573652620673\"\n" +
                "    },\n" +
                "    \"6\": {\n" +
                "        \"base\": \"3\",\n" +
                "        \"value\": \"2122212201122002221120200210011020220200\"\n" +
                "    },\n" +
                "    \"7\": {\n" +
                "        \"base\": \"3\",\n" +
                "        \"value\": \"20120221122211000100210021102001201112121\"\n" +
                "    },\n" +
                "    \"8\": {\n" +
                "        \"base\": \"6\",\n" +
                "        \"value\": \"20220554335330240002224253\"\n" +
                "    },\n" +
                "    \"9\": {\n" +
                "        \"base\": \"12\",\n" +
                "        \"value\": \"45153788322a1255483\"\n" +
                "    },\n" +
                "    \"10\": {\n" +
                "        \"base\": \"7\",\n" +
                "        \"value\": \"1101613130313526312514143\"\n" +
                "    }\n" +
                "}";

        // Process test case 1
        BigInteger secret1 = processTestCase(testCase1Json);

        // Process test case 2
        BigInteger secret2 = processTestCase(testCase2Json);

        // Print secrets simultaneously
        System.out.println(secret1);
        System.out.println(secret2);
    }

    private static BigInteger processTestCase(String json) {
        int n = 0;
        int k = 0;
        List<Point> points = new ArrayList<>();

        String[] lines = json.split("\n");
        for (int i = 0; i < lines.length; i++) {
            String line = lines[i].trim();
            if (line.startsWith("\"n\":")) {
                n = Integer.parseInt(line.split(":")[1].replaceAll("[^0-9]", ""));
            } else if (line.startsWith("\"k\":")) {
                k = Integer.parseInt(line.split(":")[1].replaceAll("[^0-9]", ""));
            } else if (line.matches("\"\\d+\":\\s*\\{")) {
                String key = line.split("\"")[1];
                int x = Integer.parseInt(key);
                String base = "";
                String value = "";
                for (int j = i + 1; j < lines.length; j++) {
                    String subLine = lines[j].trim();
                    if (subLine.startsWith("\"base\":")) {
                        base = subLine.split("\"")[3];
                    } else if (subLine.startsWith("\"value\":")) {
                        value = subLine.split("\"")[3];
                        break;
                    } else if (subLine.equals("}")) {
                        break;
                    }
                }
                if (!base.isEmpty() && !value.isEmpty()) {
                    BigInteger y = decodeValue(value, base);
                    points.add(new Point(x, y));
                }
            }
        }

        // Select first k points
        List<Point> selectedPoints = points.subList(0, k);

        // Compute the secret using Lagrange interpolation
        return lagrangeInterpolation(selectedPoints);
    }

    private static BigInteger decodeValue(String valueStr, String baseStr) {
        int base = Integer.parseInt(baseStr);
        return new BigInteger(valueStr, base);
    }

    private static BigInteger lagrangeInterpolation(List<Point> points) {
        BigInteger secret = BigInteger.ZERO;
        int n = points.size();

        for (int i = 0; i < n; i++) {
            BigInteger xi = BigInteger.valueOf(points.get(i).x);
            BigInteger yi = points.get(i).y;

            BigInteger numerator = BigInteger.ONE;
            BigInteger denominator = BigInteger.ONE;

            for (int j = 0; j < n; j++) {
                if (i != j) {
                    BigInteger xj = BigInteger.valueOf(points.get(j).x);
                    numerator = numerator.multiply(xj.negate());
                    denominator = denominator.multiply(xi.subtract(xj));
                }
            }

            BigInteger term = yi.multiply(numerator).divide(denominator);
            secret = secret.add(term);
        }

        return secret;
    }

    static class Point {
        int x;
        BigInteger y;

        Point(int x, BigInteger y) {
            this.x = x;
            this.y = y;
        }
    }
}
